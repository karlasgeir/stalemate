// Mocks generated by Mockito 5.4.1 from annotations
// in stalemate/test/src/stalemate_registry_test.dart.
// Do not manually edit this file.

// @dart=2.19

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;

import 'stalemate_registry_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StaleMateLoaderImpl1].
///
/// See the documentation for Mockito's code generation for more information.
class MockStaleMateLoaderImpl1 extends _i1.Mock
    implements _i2.StaleMateLoaderImpl1 {
  MockStaleMateLoaderImpl1() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<String> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
  @override
  String get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<String> getLocalData() => (super.noSuchMethod(
        Invocation.method(
          #getLocalData,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> getRemoteData() => (super.noSuchMethod(
        Invocation.method(
          #getRemoteData,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<void> storeLocalData(String? data) => (super.noSuchMethod(
        Invocation.method(
          #storeLocalData,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> removeLocalData() => (super.noSuchMethod(
        Invocation.method(
          #removeLocalData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> addData(String? data) => (super.noSuchMethod(
        Invocation.method(
          #addData,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [StaleMateLoaderImpl2].
///
/// See the documentation for Mockito's code generation for more information.
class MockStaleMateLoaderImpl2 extends _i1.Mock
    implements _i2.StaleMateLoaderImpl2 {
  MockStaleMateLoaderImpl2() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<int> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<int>.empty(),
      ) as _i3.Stream<int>);
  @override
  int get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: 0,
      ) as int);
  @override
  _i3.Future<int> getLocalData() => (super.noSuchMethod(
        Invocation.method(
          #getLocalData,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<int> getRemoteData() => (super.noSuchMethod(
        Invocation.method(
          #getRemoteData,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
  @override
  _i3.Future<void> storeLocalData(int? data) => (super.noSuchMethod(
        Invocation.method(
          #storeLocalData,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> removeLocalData() => (super.noSuchMethod(
        Invocation.method(
          #removeLocalData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> addData(int? data) => (super.noSuchMethod(
        Invocation.method(
          #addData,
          [data],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
